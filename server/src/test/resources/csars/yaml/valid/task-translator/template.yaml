tosca_definitions_version: tosca_simple_yaml_1_1
description: Template for deploying the simple task app with the fun translator plugin
metadata:
  template_name: simple-task-translator
  template_author: stupro-toscana
  template_version: 1.0

artifact_types:
  SQL:
    derived_from: tosca.artifacts.Implementation

topology_template:
  inputs:
    database_name:
      type: string
      description: Name for the database
    database_port:
      type: integer
      description: Port for the database
    database_password:
      type: string
      description: Password for the database
    database_user:
      type: string
      description: User name for the database
    translator_api_key:
      type: string
      required: false
      default: ""
      description: The optional api key for the external translation service. You can obtain a (non-free) key at http://funtranslations.com. Without a valid key, rate limit is 5 translations per hour
    translator_update_interval:
      type: integer
      required: false
      default: 10
      description: Defines how often the database is scanned for new tasks in order to translate them (in seconds).

  node_templates:

    translator:
      type: toscana.nodes.JavaApplication
      artifacts:
        jar: translator/task-translator.jar
      interfaces:
        Standard:
          start:
            inputs:
              database_host: { get_attribute: [ db_server, public_address ] }
              database_user: { get_property: [ my_db,  user ] }
              database_password: { get_property: [ my_db, password ] }
              database_name: { get_property: [ my_db, name ] }
              database_port: { get_property: [ my_db, port ] }
              api_key: { get_input: translator_api_key }
              update_interval: { get_input: translator_update_interval }
      requirements:
        - host: jre
        - database_endpoint:
            node: my_db
            capability: Endpoint.Database
            relationship: ConnectsTo

    jre:
      type: toscana.nodes.JavaRuntime
      properties:
        component_version: 1.8
      requirements:
        - host: translator_server


    translator_server:
      type: tosca.nodes.Compute

    my_app:
      type: tosca.nodes.WebApplication
      requirements:
        - host: apache_web_server
        - database_endpoint:
            node: my_db
            capability: Endpoint.Database
            relationship: ConnectsTo
      interfaces:
        Standard:
          start:
            inputs:
              database_host: { get_attribute: [ db_server, private_address ] }
              database_user: { get_property: [ my_db,  user ] }
              database_password: { get_property: [ my_db, password ] }
              database_name: { get_property: [ my_db, name ] }
              database_port: { get_property: [ my_db, port ] }
          create:
            implementation:
              primary: my_app/create_myphpapp.sh
              dependencies:
                - my_app/index.php

    apache_web_server:
      type: tosca.nodes.WebServer.Apache
      requirements:
        - host: app_server
      interfaces:
        Standard:
          configure:
            implementation: my_apache/install_php.sh

    app_server:
      type: tosca.nodes.Compute
      capabilities:
        host:
          properties:
            num_cpus: 1
            disk_size: 25 GB
            mem_size: 2048 MB
        os:
          properties:
            type: linux
            distribution: ubuntu
            version: 16.04

    my_db:
      type: tosca.nodes.Database.MySQL
      properties:
        name: { get_input: database_name }
        user: { get_input: database_user }
        password: { get_input: database_password }
        port: { get_input: database_port }
      capabilities:
        database_endpoint:
          properties:
            port: { get_property: [ SELF, port ] }
      requirements:
        - host: mysql_dbms
      artifacts:
        my_sql_table:
          file: my_db/createtable.sql
          type: SQL

    mysql_dbms:
      type: tosca.nodes.DBMS.MySQL
      properties:
        root_password: { get_input: database_password }
        port: { get_input: database_port }
      requirements:
        - host: db_server

    db_server:
      type: tosca.nodes.Compute
      capabilities:
        host:
          properties:
            num_cpus: 1
            disk_size: 25 GB
            mem_size: 2048 MB
        os:
          properties:
            type: linux
            distribution: ubuntu
            version: 16.04

  outputs:
    public_address:
      type: string
      description: Public address of the server
      value: { get_attribute: [ app_server, public_address ] }
    port:
      description: Port of the server
      type: string
      value: { get_attribute: [ app_server, port ] }
